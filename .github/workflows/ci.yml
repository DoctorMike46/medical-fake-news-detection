name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    name: 🐍 Backend Tests
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 🧪 Run backend tests
      working-directory: ./backend
      env:
        MONGO_URI: mongodb://test:test@localhost:27017/
        DB_NAME: test_fake_news_db
        JWT_SECRET_KEY: test-secret-key-for-ci
        TESTING: true
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: 📊 Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: 🔍 Run security checks
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: 📋 Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          backend/coverage.xml
          backend/bandit-report.json
          backend/safety-report.json

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: ⚛️ Frontend Tests

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🧪 Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter

    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: 📊 Upload frontend coverage
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: 📋 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    name: 🔍 Code Quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy

    - name: 🎨 Check Python formatting
      working-directory: ./backend
      run: |
        black --check --diff app/ tests/
        isort --check-only --diff app/ tests/
        flake8 app/ tests/

    - name: 🔍 Type checking
      working-directory: ./backend
      run: |
        mypy app/ --ignore-missing-imports

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🎨 Check JavaScript/TypeScript formatting
      working-directory: ./frontend
      run: |
        npm run lint

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: 🐳 Docker Build
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: medical-fakenews-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: medical-fakenews-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker Compose
      run: |
        echo "JWT_SECRET_KEY=test-secret-for-ci" > .env
        echo "MONGO_ROOT_USERNAME=test" >> .env
        echo "MONGO_ROOT_PASSWORD=test" >> .env
        docker-compose -f docker-compose.yml config

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: 🔐 Security Scan
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📋 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    name: 🚀 Deploy
    needs: [backend-tests, frontend-tests, code-quality, docker-build, security-scan]
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚧 Deployment step would go here"
        echo "✅ This is where you'd deploy to your staging/production environment"
        # Add your deployment commands here
        
    - name: 📬 Notify deployment
      if: success()
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, email, etc.)