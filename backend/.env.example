# ===== MEDICAL FAKE NEWS DETECTION - BACKEND CONFIG =====
# Copy this file to .env and fill in your actual values

# ===== DATABASE CONFIGURATION =====
# MongoDB connection string
MONGO_URI=mongodb://localhost:27017/
# Database name for the application
DB_NAME=fake_news_db

# ===== SECURITY =====
# JWT Secret Key - CRITICAL: Generate a strong secret for production!
# Use: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=your-super-secret-jwt-key-minimum-32-characters

# ===== CORS & SECURITY =====
# Allowed origins for CORS (comma-separated)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000

# ===== LARGE LANGUAGE MODELS =====
# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4-turbo-preview

# Google Gemini Configuration
GEMINI_API_KEY=your-gemini-api-key-here
GEMINI_MODEL=gemini-1.5-pro

# Anthropic Claude Configuration  
CLAUDE_API_KEY=your-claude-api-key-here
CLAUDE_MODEL=claude-3-5-sonnet-20241022

# ZhipuAI GLM4 Configuration (optional)
GLM4_API_KEY=your-glm4-api-key-here
GLM4_MODEL=glm-4

# Ollama Local Model (optional)
OLLAMA_MODEL=llama3.1:8b

# ===== SOCIAL MEDIA APIS =====
# Twitter/X API
TWITTER_BEARER_TOKEN=your-twitter-bearer-token-here
TWITTER_EMAIL=your-twitter-email@example.com
TWITTER_PASSWORD=your-twitter-password

# Reddit API
REDDIT_CLIENT_ID=your-reddit-client-id
REDDIT_CLIENT_SECRET=your-reddit-client-secret
REDDIT_USER_AGENT=medical_fake_news_detector_v1

# YouTube API
YOUTUBE_API_KEY=your-youtube-api-key-here

# Facebook (optional - requires special permissions)
FACEBOOK_EMAIL=your-facebook-email@example.com
FACEBOOK_PASSWORD=your-facebook-password

# CrowdTangle API (optional)
CROWDTANGLE_API_TOKEN=your-crowdtangle-token

# ===== SCIENTIFIC DATABASES =====
# PubMed/NCBI Configuration
PUBMED_EMAIL=your-email-for-ncbi@example.com
ENTREZ_API_KEY=your-entrez-api-key-here

# MetaMap UMLS Configuration (optional)
METAMAP_UTS_API_KEY=your-umls-api-key
METAMAP_UTS_USERNAME=your-umls-username
METAMAP_UTS_PASSWORD=your-umls-password

# ===== ELASTICSEARCH (optional) =====
# Elasticsearch configuration for advanced search
ES_HOST=localhost
ES_PORT=9200
ES_CLOUD_ID=your-elastic-cloud-id
ES_API_KEY=your-elasticsearch-api-key
ELASTIC_API_KEY=your-elastic-api-key

# ===== APPLICATION SETTINGS =====
# Flask environment
FLASK_ENV=development
FLASK_DEBUG=True

# Logging level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# ===== PERFORMANCE & CACHING =====
# Redis for caching (optional)
REDIS_URL=redis://localhost:6379/0

# Rate limiting settings
RATE_LIMIT_REQUESTS_PER_MINUTE=100
RATE_LIMIT_STORAGE_URL=memory://

# ===== MONITORING & ANALYTICS =====
# Sentry for error tracking (optional)
SENTRY_DSN=your-sentry-dsn-here

# Application insights (optional)
APPLICATION_INSIGHTS_CONNECTION_STRING=your-app-insights-connection-string

# ===== DEVELOPMENT SETTINGS =====
# Enable/disable certain features during development
ENABLE_BACKGROUND_TASKS=True
ENABLE_ANALYTICS=False
ENABLE_RATE_LIMITING=False

# ===== PRODUCTION OVERRIDES =====
# Uncomment and modify for production deployment
# FLASK_ENV=production
# FLASK_DEBUG=False
# LOG_LEVEL=WARNING
# ENABLE_RATE_LIMITING=True
# ENABLE_ANALYTICS=True

# ===== INSTRUCTIONS =====
# 1. Copy this file to .env: cp .env.example .env
# 2. Fill in your actual API keys and credentials
# 3. Never commit .env file to version control
# 4. For production, use environment variables or secure secret management
# 5. Test your configuration with: python -c "from app.core.config import Config; Config.validate_config()"